import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useContext } from "react";
import { Badge } from "../ui/badge";
import { AppContext } from "@/App";
import { ActiveRecipeContext } from "./AllRecipes";
import { Clock, Earth, Zap } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../ui/tooltip";
import { Link } from "react-router-dom";
import { nanoid } from "nanoid";
export default function Recipe({ recipe, onChange }) {
    const { screenSizes: { xl } } = useContext(AppContext);
    return xl ? _jsx(List, { recipe: recipe, onChange: onChange }) : _jsx(Square, { recipe: recipe, onChange: onChange });
}
function List({ recipe, onChange }) {
    const activeRecipe = useContext(ActiveRecipeContext);
    return (_jsxs("label", { className: `overflow-hidden min-h-[225px] w-full border ${recipe.isFavorite ? "bg-rose-100 border-rose-400" : "border-slate-400"} flex justify-between rounded-lg hover:cursor-pointer hover:bg-slate-100 has-[:checked]:border-2 has-[:checked]:border-orange-500 has-[:checked]:bg-orange-100 transition-all`, children: [_jsx("input", { type: "radio", name: "recipe", value: recipe.title, onChange: () => onChange(recipe), checked: recipe.title === activeRecipe, className: "hidden" }), _jsx("div", { className: "relative group overflow-hidden flex justify-center items-center basis-1/3 shadow-lg", children: _jsx("div", { className: "h-full relative flex justify-center items-center", children: _jsx("img", { src: recipe.image, alt: recipe.title, className: "scale-[150%] lg:scale-[200%] group-hover:scale-[175%] transition" }) }) }), _jsxs("div", { className: "relative flex flex-col justify-between gap-1 basis-2/3 py-3 px-4", children: [_jsx("h1", { className: "font-bold text-lg mx-0 pr-2", children: recipe.title }), recipe.diets && recipe.diets.length > 0 &&
                        _jsx("div", { className: "flex gap-[6px]", children: recipe.diets.slice(0, 3).map((diet) => _jsx(Badge, { className: "pointer-events-none bg-orange-500", children: diet }, nanoid())) }), _jsxs("div", { className: "flex gap-2 items-center", children: [_jsxs("div", { className: "flex justify-center items-center gap-2 my-1", children: [_jsx(Zap, {}), _jsxs("span", { children: [_jsx("b", { children: Math.round(recipe.nutrition.find(n => n.name.toLowerCase() === "calories")?.amount || 0) }), " cal"] })] }), _jsxs("div", { className: "flex items-center gap-2 my-1", children: [_jsx(TooltipProvider, { children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { children: _jsx(Clock, {}) }), _jsx(TooltipContent, { children: _jsx("p", { children: "Ready Time" }) })] }) }), _jsxs("span", { children: [_jsx("b", { children: recipe.times.readyTime }), " mins"] })] })] }), _jsx("div", { className: "flex flex-wrap items-center gap-2", children: recipe.ingredients.slice(0, 3).map((ingredient) => (_jsx("div", { className: "max-w-[150px] line-clamp-1 pointer-events-none min-w-8 text-sm p-2 border border-slate-300 bg-white rounded-md", children: ingredient.name }, nanoid()))) }), _jsx("div", { children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("p", { className: "text-muted-foreground max-w-[90%]", children: recipe.dishTypes?.slice(0, 5).join(" Â· ") }), recipe.source &&
                                    _jsx(TooltipProvider, { children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { children: _jsx(Link, { to: recipe.source?.url, target: "_blank", children: _jsx(Earth, { color: "#1e293b" }) }) }), _jsx(TooltipContent, { children: recipe.source?.name })] }) })] }) })] })] }));
}
function Square({ recipe, onChange }) {
    const activeRecipe = useContext(ActiveRecipeContext);
    return (_jsxs("label", { className: `relative overflow-hidden aspect-square min-h-[225px] w-full border ${recipe.isFavorite ? "bg-rose-100 border-rose-400" : "border-slate-400"} flex flex-col justify-between p-4 rounded-lg hover:cursor-pointer hover:bg-slate-100 has-[:checked]:border-2 has-[:checked]:border-orange-500 has-[:checked]:bg-orange-100 transition-all`, children: [_jsx("input", { type: "radio", name: "recipe", value: recipe.title, onChange: () => onChange(recipe), checked: recipe.title === activeRecipe, className: "hidden" }), _jsx("img", { src: recipe.image, alt: recipe.title, className: "rounded-lg h-1/2 lg:h-2/3" }), _jsx("h1", { className: "text-center font-bold text-lg line-clamp-1", children: recipe.title }), _jsxs("div", { className: "flex gap-2 text-muted-foreground", children: [_jsx(Zap, {}), _jsxs("span", { className: "font-bold after:[]", children: [_jsx("b", { children: Math.round(recipe.nutrition.find(n => n.name.toLowerCase() === "calories")?.amount || 0) }), " kcal"] })] }), _jsxs("div", { className: "flex gap-2 text-muted-foreground", children: [_jsx(Clock, {}), _jsxs("span", { children: [_jsx("b", { children: Math.round(recipe.times.readyTime) }), " min"] })] }), _jsx("div", { className: "absolute bottom-4 right-4", children: _jsx(Link, { to: recipe.source?.url, target: "_blank", children: _jsx(Earth, {}) }) })] }));
}
